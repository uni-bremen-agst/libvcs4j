<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        #chart {
            width: 1700px;
            height: 900px;
            background: #ddd;
        }

        #tooltip h3 {
            margin:2px;
            font-size:14px;
        }

        #tooltip {
            position: absolute;
            background:rgba(255,255,255,1);
            text-align: left;
            border:1px;
            border-radius:5px;
            font: 12px sans-serif;
            width:auto;
            padding:4px;
            color:black;
            opacity:0;
            pointer-events: none;
        }

        #tooltip table {
            table-layout:fixed;
        }

        #tooltip tr td {
            padding:0;
            margin:0;
        }

        text {
            pointer-events: none;
            fill: #5e5e5e;
        }

        .grandparent text {
            font-weight: bold;
        }

        rect {
            stroke: #000;
        }

        rect.parent,
        .grandparent rect {
            stroke-width: 2px;
        }

        .grandparent rect {
            fill: orange;
        }

        .grandparent:hover rect {
            fill: #ee9700;
        }

        .children rect.parent,
        .grandparent rect {
            cursor: pointer;
        }

        .children rect.parent {
            fill: #bbb;
            fill-opacity: 0;
        }
    </style>
</head>



<body>
    <p id="chart">
    <script>@D3_SCRIPT@</script>
    <script>
    var margin = {top: 20, right: 0, bottom: 0, left: 0},
        width = 1700,
        height = 900 - margin.top - margin.bottom,
        formatNumber = d3.format(",d"),
        transitioning;

    var x = d3.scale.linear()
        .domain([0, width])
        .range([0, width]);

    var y = d3.scale.linear()
        .domain([0, height])
        .range([0, height]);

    var color = d3.scale.linear()
        .domain([@MIN_COLOR@, @MAX_COLOR@])
        .range(["#FFFFFF","#FF0000"]);

    var treemap = d3.layout.treemap()
        .children(function(d, depth) { return depth ? null : d._children; })
        .sort(function(a, b) { return a.value - b.value; })
        .ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
        .round(false);

    var svg = d3.select("#chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.bottom + margin.top)
        .style("margin-left", -margin.left + "px")
        .style("margin.right", -margin.right + "px")
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
        .style("shape-rendering", "crispEdges");

    var grandparent = svg.append("g")
        .attr("class", "grandparent");

    grandparent.append("rect")
        .attr("y", -margin.top)
        .attr("width", width)
        .attr("height", margin.top);

    grandparent.append("text")
        .attr("x", 6)
        .attr("y", 6 - margin.top)
        .attr("dy", ".75em");

    var root = JSON.parse('@JSON_STRING@')
    initialize(root);
    accumulate(root);
    layout(root);
    display(root);

    function initialize(root) {
      root.x = root.y = 0;
      root.dx = width;
      root.dy = height;
      root.depth = 0;
    }

    // Aggregate the values for internal nodes. This is normally done by the
    // treemap layout, but not here because of our custom implementation.
    // We also take a snapshot of the original children (_children) to avoid
    // the children being overwritten when layout is computed.
    function accumulate(d) {
      return (d._children = d.children)
          ? d.value = d.children.reduce(function(p, v) { return p + accumulate(v); }, 0)
          : d.value;
    }

    // Compute the treemap layout recursively such that each group of siblings
    // uses the same size (1×1) rather than the dimensions of the parent cell.
    // This optimizes the layout for the current zoom state. Note that a wrapper
    // object is created for the parent node for each group of siblings so that
    // the parent’s dimensions are not discarded as we recurse. Since each group
    // of sibling was laid out in 1×1, we must rescale to fit using absolute
    // coordinates. This lets us use a viewport to zoom.
    function layout(d) {
      if (d._children) {
        treemap.nodes({_children: d._children});
        d._children.forEach(function(c) {
          c.x = d.x + c.x * d.dx;
          c.y = d.y + c.y * d.dy;
          c.dx *= d.dx;
          c.dy *= d.dy;
          c.parent = d;
          layout(c);
        });
      }
    }

    function display(d) {
      grandparent
          .datum(d.parent)
          .on("click", transition)
        .select("text")
          .text(name(d));

      var g1 = svg.insert("g", ".grandparent")
          .datum(d)
          .attr("class", "depth");

      var g = g1.selectAll("g")
          .data(d._children)
        .enter().append("g");

      g.filter(function(d) { return d._children; })
          .classed("children", true)
          .on("click", transition);

      g.selectAll(".child")
          .data(function(d) { return d._children || [d]; })
        .enter().append("rect")
          .attr("class", "child")
          .call(rect);

      d3.select("#chart").select("#tooltip").remove();
      var div = d3.select("#chart").append("div")
                  .attr("id", "tooltip")
                  .style("opacity", 0);

      g.append("rect")
          .attr("class", "parent")
          .call(rect)
          .on("mousemove", function(d) {
              d3.select("#tooltip")
                .transition()
                .duration(200)
                .style("opacity", 1);
              d3.select("#tooltip")
                .html("<h3>"+d.name+"</h3><table>"+
                      "<tr><td>Size: "+d.value+"</td></tr>"+
                      "<tr><td>Value: "+d.color+"</td></tr>"+
                      "</table>")
                .style("left", (d3.event.pageX-document.getElementById('chart').offsetLeft + 20) + "px")
                .style("top", (d3.event.pageY-document.getElementById('chart').offsetTop - 60) + "px");
          })
          .on("mouseout", function(d) {
              d3.select("#tooltip").transition()
                .duration(500)
                .style("opacity", 0);
          })

      g.append("text")
          .attr("dy", ".75em")
          .text(function(d) { return d.name; })
          .call(text);

      function transition(d) {
        if (transitioning || !d) return;
        transitioning = true;

        var g2 = display(d),
            t1 = g1.transition().duration(750),
            t2 = g2.transition().duration(750);

        // Update the domain only after entering new elements.
        x.domain([d.x, d.x + d.dx]);
        y.domain([d.y, d.y + d.dy]);

        // Enable anti-aliasing during the transition.
        svg.style("shape-rendering", null);

        // Draw child nodes on top of parent nodes.
        svg.selectAll(".depth").sort(function(a, b) { return a.depth - b.depth; });

        // Fade-in entering text.
        g2.selectAll("text").style("fill-opacity", 0);

        // Transition to the new view.
        t1.selectAll("text").call(text).style("fill-opacity", 0);
        t2.selectAll("text").call(text).style("fill-opacity", 1);
        t1.selectAll("rect").call(rect);
        t2.selectAll("rect").call(rect);

        // Remove the old node when the transition is finished.
        t1.remove().each("end", function() {
          svg.style("shape-rendering", "crispEdges");
          transitioning = false;
        });
      }

      return g;
    }

    //function text(text) {
    //  text.attr("x", function(d) { return x(d.x) + 6; })
    //      .attr("y", function(d) { return y(d.y) + 6; });
    //}
    function text(text) {
      text.attr("x", function(d) { return x(d.x) + (x(d.x + d.dx) - x(d.x))/2; })
          .attr("y", function(d) { return y(d.y) + (y(d.y + d.dy) - y(d.y))/2; })
          .attr("dy", 0)
          .attr("font-size", function(d) { var w=x(d.x + d.dx) - x(d.x),
                                               h=y(d.y + d.dy) - y(d.y),
                                               t=(d.name).length/1.3;
                                               var tf=Math.min(Math.floor(w/t),h/3);
                                               return (tf>=5)?Math.min(tf, 30):0; })
          .attr("text-anchor", "middle");
    }

    function rect(rect) {
      rect.attr("x", function(d) { return x(d.x); })
          .attr("y", function(d) { return y(d.y); })
          .attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
          .attr("height", function(d) { return y(d.y + d.dy) - y(d.y); })
          .attr("fill", function(d){return color(parseFloat(d.color));});
    }

    function name(d) {
      return d.parent
          ? name(d.parent) + "." + d.name
          : d.name;
    }
</script>
</html>
