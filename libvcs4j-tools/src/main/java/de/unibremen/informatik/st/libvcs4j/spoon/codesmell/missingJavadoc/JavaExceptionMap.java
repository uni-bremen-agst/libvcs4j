package de.unibremen.informatik.st.libvcs4j.spoon.codesmell.missingJavadoc;

import java.util.HashMap;

/**
 * This class contains an hashmap with all public exceptions and errors from the java api (version 8).
 * Based on the website: https://programming.guide/java/list-of-java-exceptions.html
 * visited at 2019-07-08.
 *
 * @author Michel Krause
 * @version 1.0
 */
public class JavaExceptionMap {
    static HashMap<String, String> exceptionMap = new HashMap<String, String>();

    /**
     * This Method put's all the pairs in to the exceptionMap.
     * A pair is builded by the simple name and the qualified name.
     * So there is the possibility to search for a simple name and get the qulified name.
     */
    private static void addExceptions() {
        exceptionMap.put("Throwable", "java.lang.Throwable");
        exceptionMap.put("Exception", "java.lang.Exception");
        exceptionMap.put("CloneNotSupportedException", "java.lang.CloneNotSupportedException");
        exceptionMap.put("InterruptedException", "java.lang.InterruptedException");
        exceptionMap.put("ReflectiveOperationException", "java.lang.ReflectiveOperationException");
        exceptionMap.put("ClassNotFoundException", "java.lang.ClassNotFoundException");
        exceptionMap.put("IllegalAccessException", "java.lang.IllegalAccessException");
        exceptionMap.put("InstantiationException", "java.lang.InstantiationException");
        exceptionMap.put("NoSuchFieldException", "java.lang.NoSuchFieldException");
        exceptionMap.put("NoSuchMethodException", "java.lang.NoSuchMethodException");
        exceptionMap.put("RuntimeException", "java.lang.RuntimeException");
        exceptionMap.put("ArithmeticException", "java.lang.ArithmeticException");
        exceptionMap.put("ArrayStoreException", "java.lang.ArrayStoreException");
        exceptionMap.put("ClassCastException", "java.lang.ClassCastException");
        exceptionMap.put("EnumConstantNotPresentException", "java.lang.EnumConstantNotPresentException");
        exceptionMap.put("IllegalArgumentException", "java.lang.IllegalArgumentException");
        exceptionMap.put("IllegalThreadStateException", "java.lang.IllegalThreadStateException");
        exceptionMap.put("NumberFormatException", "java.lang.NumberFormatException");
        exceptionMap.put("IllegalMonitorStateException", "java.lang.IllegalMonitorStateException");
        exceptionMap.put("IllegalStateException", "java.lang.IllegalStateException");
        exceptionMap.put("IndexOutOfBoundsException", "java.lang.IndexOutOfBoundsException");
        exceptionMap.put("ArrayIndexOutOfBoundsException", "java.lang.ArrayIndexOutOfBoundsException");
        exceptionMap.put("StringIndexOutOfBoundsException", "java.lang.StringIndexOutOfBoundsException");
        exceptionMap.put("NegativeArraySizeException", "java.lang.NegativeArraySizeException");
        exceptionMap.put("NullPointerException", "java.lang.NullPointerException");
        exceptionMap.put("SecurityException", "java.lang.SecurityException");
        exceptionMap.put("TypeNotPresentException", "java.lang.TypeNotPresentException");
        exceptionMap.put("UnsupportedOperationException", "java.lang.UnsupportedOperationException");
        exceptionMap.put("Error", "java.lang.Error");
        exceptionMap.put("AssertionError", "java.lang.AssertionError");
        exceptionMap.put("LinkageError", "java.lang.LinkageError");
        exceptionMap.put("BootstrapMethodError", "java.lang.BootstrapMethodError");
        exceptionMap.put("ClassCircularityError", "java.lang.ClassCircularityError");
        exceptionMap.put("ClassFormatError", "java.lang.ClassFormatError");
        exceptionMap.put("UnsupportedClassVersionError", "java.lang.UnsupportedClassVersionError");
        exceptionMap.put("ExceptionInInitializerError", "java.lang.ExceptionInInitializerError");
        exceptionMap.put("IncompatibleClassChangeError", "java.lang.IncompatibleClassChangeError");
        exceptionMap.put("AbstractMethodError", "java.lang.AbstractMethodError");
        exceptionMap.put("IllegalAccessError", "java.lang.IllegalAccessError");
        exceptionMap.put("InstantiationError", "java.lang.InstantiationError");
        exceptionMap.put("NoSuchFieldError", "java.lang.NoSuchFieldError");
        exceptionMap.put("NoSuchMethodError", "java.lang.NoSuchMethodError");
        exceptionMap.put("NoClassDefFoundError", "java.lang.NoClassDefFoundError");
        exceptionMap.put("UnsatisfiedLinkError", "java.lang.UnsatisfiedLinkError");
        exceptionMap.put("VerifyError", "java.lang.VerifyError");
        exceptionMap.put("ThreadDeath", "java.lang.ThreadDeath");
        exceptionMap.put("VirtualMachineError", "java.lang.VirtualMachineError");
        exceptionMap.put("InternalError", "java.lang.InternalError");
        exceptionMap.put("OutOfMemoryError", "java.lang.OutOfMemoryError");
        exceptionMap.put("StackOverflowError", "java.lang.StackOverflowError");
        exceptionMap.put("UnknownError", "java.lang.UnknownError");
        exceptionMap.put("InvalidPropertiesFormatException", "java.util.InvalidPropertiesFormatException");
        exceptionMap.put("ConcurrentModificationException", "java.util.ConcurrentModificationException");
        exceptionMap.put("EmptyStackException", "java.util.EmptyStackException");
        exceptionMap.put("IllegalFormatException", "java.util.IllegalFormatException");
        exceptionMap.put("DuplicateFormatFlagsException", "java.util.DuplicateFormatFlagsException");
        exceptionMap.put("FormatFlagsConversionMismatchException", "java.util.FormatFlagsConversionMismatchException");
        exceptionMap.put("IllegalFormatCodePointException", "java.util.IllegalFormatCodePointException");
        exceptionMap.put("IllegalFormatConversionException", "java.util.IllegalFormatConversionException");
        exceptionMap.put("IllegalFormatFlagsException", "java.util.IllegalFormatFlagsException");
        exceptionMap.put("IllegalFormatPrecisionException", "java.util.IllegalFormatPrecisionException");
        exceptionMap.put("IllegalFormatWidthException", "java.util.IllegalFormatWidthException");
        exceptionMap.put("MissingFormatArgumentException", "java.util.MissingFormatArgumentException");
        exceptionMap.put("MissingFormatWidthException", "java.util.MissingFormatWidthException");
        exceptionMap.put("UnknownFormatConversionException", "java.util.UnknownFormatConversionException");
        exceptionMap.put("UnknownFormatFlagsException", "java.util.UnknownFormatFlagsException");
        exceptionMap.put("FormatterClosedException", "java.util.FormatterClosedException");
        exceptionMap.put("IllformedLocaleException", "java.util.IllformedLocaleException");
        exceptionMap.put("MissingResourceException", "java.util.MissingResourceException");
        exceptionMap.put("NoSuchElementException", "java.util.NoSuchElementException");
        exceptionMap.put("InputMismatchException", "java.util.InputMismatchException");
        exceptionMap.put("TooManyListenersException", "java.util.TooManyListenersException");
        exceptionMap.put("ServiceConfigurationError", "java.util.ServiceConfigurationError");
        exceptionMap.put("BrokenBarrierException", "java.util.concurrent.BrokenBarrierException");
        exceptionMap.put("ExecutionException", "java.util.concurrent.ExecutionException");
        exceptionMap.put("CompletionException", "java.util.concurrent.CompletionException");
        exceptionMap.put("CancellationException", "java.util.concurrent.CancellationException");
        exceptionMap.put("RejectedExecutionException", "java.util.concurrent.RejectedExecutionException");
        exceptionMap.put("TimeoutException", "java.util.concurrent.TimeoutException");
        exceptionMap.put("JarException", "java.util.jar.JarException");
        exceptionMap.put("BackingStoreException", "java.util.prefs.BackingStoreException");
        exceptionMap.put("InvalidPreferencesFormatException", "java.util.prefs.InvalidPreferencesFormatException");
        exceptionMap.put("PatternSyntaxException", "java.util.regex.PatternSyntaxException");
        exceptionMap.put("DataFormatException", "java.util.zip.DataFormatException");
        exceptionMap.put("ZipException", "java.util.zip.ZipException");
        exceptionMap.put("ZipError", "java.util.zip.ZipError");
        exceptionMap.put("IOException", "java.io.IOException");
        exceptionMap.put("CharConversionException", "java.io.CharConversionException");
        exceptionMap.put("EOFException", "java.io.EOFException");
        exceptionMap.put("FileNotFoundException", "java.io.FileNotFoundException");
        exceptionMap.put("InterruptedIOException", "java.io.InterruptedIOException");
        exceptionMap.put("ObjectStreamException", "java.io.ObjectStreamException");
        exceptionMap.put("InvalidClassException", "java.io.InvalidClassException");
        exceptionMap.put("InvalidObjectException", "java.io.InvalidObjectException");
        exceptionMap.put("NotActiveException", "java.io.NotActiveException");
        exceptionMap.put("NotSerializableException", "java.io.NotSerializableException");
        exceptionMap.put("OptionalDataException", "java.io.OptionalDataException");
        exceptionMap.put("StreamCorruptedException", "java.io.StreamCorruptedException");
        exceptionMap.put("WriteAbortedException", "java.io.WriteAbortedException");
        exceptionMap.put("SyncFailedException", "java.io.SyncFailedException");
        exceptionMap.put("UnsupportedEncodingException", "java.io.UnsupportedEncodingException");
        exceptionMap.put("UTFDataFormatException", "java.io.UTFDataFormatException");
        exceptionMap.put("UncheckedIOException", "java.io.UncheckedIOException");
        exceptionMap.put("IOError", "java.io.IOError");
        exceptionMap.put("AWTException", "java.awt.AWTException");
        exceptionMap.put("FontFormatException", "java.awt.FontFormatException");
        exceptionMap.put("IllegalComponentStateException", "java.awt.IllegalComponentStateException");
        exceptionMap.put("HeadlessException", "java.awt.HeadlessException");
        exceptionMap.put("AWTError", "java.awt.AWTError");
        exceptionMap.put("CMMException", "java.awt.color.CMMException");
        exceptionMap.put("ProfileDataException", "java.awt.color.ProfileDataException");
        exceptionMap.put("MimeTypeParseException", "java.awt.datatransfer.MimeTypeParseException");
        exceptionMap.put("UnsupportedFlavorException", "java.awt.datatransfer.UnsupportedFlavorException");
        exceptionMap.put("InvalidDnDOperationException", "java.awt.dnd.InvalidDnDOperationException");
        exceptionMap.put("NoninvertibleTransformException", "java.awt.geom.NoninvertibleTransformException");
        exceptionMap.put("IllegalPathStateException", "java.awt.geom.IllegalPathStateException");
        exceptionMap.put("ImagingOpException", "java.awt.image.ImagingOpException");
        exceptionMap.put("RasterFormatException", "java.awt.image.RasterFormatException");
        exceptionMap.put("PrinterException", "java.awt.print.PrinterException");
        exceptionMap.put("PrinterAbortException", "java.awt.print.PrinterAbortException");
        exceptionMap.put("PrinterIOException", "java.awt.print.PrinterIOException");
        exceptionMap.put("IntrospectionException", "java.beans.IntrospectionException");
        exceptionMap.put("PropertyVetoException", "java.beans.PropertyVetoException");
        exceptionMap.put("AnnotationTypeMismatchException", "java.lang.annotation.AnnotationTypeMismatchException");
        exceptionMap.put("IncompleteAnnotationException", "java.lang.annotation.IncompleteAnnotationException");
        exceptionMap.put("AnnotationFormatError", "java.lang.annotation.AnnotationFormatError");
        exceptionMap.put("IllegalClassFormatException", "java.lang.instrument.IllegalClassFormatException");
        exceptionMap.put("UnmodifiableClassException", "java.lang.instrument.UnmodifiableClassException");
        exceptionMap.put("LambdaConversionException", "java.lang.invoke.LambdaConversionException");
        exceptionMap.put("WrongMethodTypeException", "java.lang.invoke.WrongMethodTypeException");
        exceptionMap.put("InvocationTargetException", "java.lang.reflect.InvocationTargetException");
        exceptionMap.put("MalformedParameterizedTypeException",
                "java.lang.reflect.MalformedParameterizedTypeException");
        exceptionMap.put("MalformedParametersException", "java.lang.reflect.MalformedParametersException");
        exceptionMap.put("UndeclaredThrowableException", "java.lang.reflect.UndeclaredThrowableException");
        exceptionMap.put("GenericSignatureFormatError", "java.lang.reflect.GenericSignatureFormatError");
        exceptionMap.put("HttpRetryException", "java.net.HttpRetryException");
        exceptionMap.put("SocketTimeoutException", "java.net.SocketTimeoutException");
        exceptionMap.put("MalformedURLException", "java.net.MalformedURLException");
        exceptionMap.put("ProtocolException", "java.net.ProtocolException");
        exceptionMap.put("SocketException", "java.net.SocketException");
        exceptionMap.put("BindException", "java.net.BindException");
        exceptionMap.put("ConnectException", "java.net.ConnectException");
        exceptionMap.put("NoRouteToHostException", "java.net.NoRouteToHostException");
        exceptionMap.put("PortUnreachableException", "java.net.PortUnreachableException");
        exceptionMap.put("UnknownHostException", "java.net.UnknownHostException");
        exceptionMap.put("UnknownServiceException", "java.net.UnknownServiceException");
        exceptionMap.put("URISyntaxException", "java.net.URISyntaxException");
        exceptionMap.put("BufferOverflowException", "java.nio.BufferOverflowException");
        exceptionMap.put("BufferUnderflowException", "java.nio.BufferUnderflowException");
        exceptionMap.put("InvalidMarkException", "java.nio.InvalidMarkException");
        exceptionMap.put("ReadOnlyBufferException", "java.nio.ReadOnlyBufferException");
        exceptionMap.put("ClosedChannelException", "java.nio.channels.ClosedChannelException");
        exceptionMap.put("AsynchronousCloseException", "java.nio.channels.AsynchronousCloseException");
        exceptionMap.put("ClosedByInterruptException", "java.nio.channels.ClosedByInterruptException");
        exceptionMap.put("FileLockInterruptionException", "java.nio.channels.FileLockInterruptionException");
        exceptionMap.put("InterruptedByTimeoutException", "java.nio.channels.InterruptedByTimeoutException");
        exceptionMap.put("IllegalChannelGroupException", "java.nio.channels.IllegalChannelGroupException");
        exceptionMap.put("IllegalSelectorException", "java.nio.channels.IllegalSelectorException");
        exceptionMap.put("UnresolvedAddressException", "java.nio.channels.UnresolvedAddressException");
        exceptionMap.put("UnsupportedAddressTypeException", "java.nio.channels.UnsupportedAddressTypeException");
        exceptionMap.put("AcceptPendingException", "java.nio.channels.AcceptPendingException");
        exceptionMap.put("AlreadyBoundException", "java.nio.channels.AlreadyBoundException");
        exceptionMap.put("AlreadyConnectedException", "java.nio.channels.AlreadyConnectedException");
        exceptionMap.put("CancelledKeyException", "java.nio.channels.CancelledKeyException");
        exceptionMap.put("ClosedSelectorException", "java.nio.channels.ClosedSelectorException");
        exceptionMap.put("ConnectionPendingException", "java.nio.channels.ConnectionPendingException");
        exceptionMap.put("IllegalBlockingModeException", "java.nio.channels.IllegalBlockingModeException");
        exceptionMap.put("NoConnectionPendingException", "java.nio.channels.NoConnectionPendingException");
        exceptionMap.put("NonReadableChannelException", "java.nio.channels.NonReadableChannelException");
        exceptionMap.put("NonWritableChannelException", "java.nio.channels.NonWritableChannelException");
        exceptionMap.put("NotYetBoundException", "java.nio.channels.NotYetBoundException");
        exceptionMap.put("NotYetConnectedException", "java.nio.channels.NotYetConnectedException");
        exceptionMap.put("OverlappingFileLockException", "java.nio.channels.OverlappingFileLockException");
        exceptionMap.put("ReadPendingException", "java.nio.channels.ReadPendingException");
        exceptionMap.put("ShutdownChannelGroupException", "java.nio.channels.ShutdownChannelGroupException");
        exceptionMap.put("WritePendingException", "java.nio.channels.WritePendingException");
        exceptionMap.put("CharacterCodingException", "java.nio.charset.CharacterCodingException");
        exceptionMap.put("MalformedInputException", "java.nio.charset.MalformedInputException");
        exceptionMap.put("UnmappableCharacterException", "java.nio.charset.UnmappableCharacterException");
        exceptionMap.put("IllegalCharsetNameException", "java.nio.charset.IllegalCharsetNameException");
        exceptionMap.put("UnsupportedCharsetException", "java.nio.charset.UnsupportedCharsetException");
        exceptionMap.put("CoderMalfunctionError", "java.nio.charset.CoderMalfunctionError");
        exceptionMap.put("FileSystemException", "java.nio.file.FileSystemException");
        exceptionMap.put("AccessDeniedException", "java.nio.file.AccessDeniedException");
        exceptionMap.put("AtomicMoveNotSupportedException", "java.nio.file.AtomicMoveNotSupportedException");
        exceptionMap.put("DirectoryNotEmptyException", "java.nio.file.DirectoryNotEmptyException");
        exceptionMap.put("FileAlreadyExistsException", "java.nio.file.FileAlreadyExistsException");
        exceptionMap.put("FileSystemLoopException", "java.nio.file.FileSystemLoopException");
        exceptionMap.put("NoSuchFileException", "java.nio.file.NoSuchFileException");
        exceptionMap.put("NotDirectoryException", "java.nio.file.NotDirectoryException");
        exceptionMap.put("NotLinkException", "java.nio.file.NotLinkException");
        exceptionMap.put("DirectoryIteratorException", "java.nio.file.DirectoryIteratorException");
        exceptionMap.put("FileSystemAlreadyExistsException", "java.nio.file.FileSystemAlreadyExistsException");
        exceptionMap.put("FileSystemNotFoundException", "java.nio.file.FileSystemNotFoundException");
        exceptionMap.put("InvalidPathException", "java.nio.file.InvalidPathException");
        exceptionMap.put("ProviderMismatchException", "java.nio.file.ProviderMismatchException");
        exceptionMap.put("ClosedDirectoryStreamException", "java.nio.file.ClosedDirectoryStreamException");
        exceptionMap.put("ClosedFileSystemException", "java.nio.file.ClosedFileSystemException");
        exceptionMap.put("ClosedWatchServiceException", "java.nio.file.ClosedWatchServiceException");
        exceptionMap.put("ProviderNotFoundException", "java.nio.file.ProviderNotFoundException");
        exceptionMap.put("ReadOnlyFileSystemException", "java.nio.file.ReadOnlyFileSystemException");
        exceptionMap.put("UserPrincipalNotFoundException", "java.nio.file.attribute.UserPrincipalNotFoundException");
        exceptionMap.put("AlreadyBoundException", "java.rmi.AlreadyBoundException");
        exceptionMap.put("RemoteException", "java.rmi.RemoteException");
        exceptionMap.put("AccessException", "java.rmi.AccessException");
        exceptionMap.put("ConnectException", "java.rmi.ConnectException");
        exceptionMap.put("ConnectIOException", "java.rmi.ConnectIOException");
        exceptionMap.put("MarshalException", "java.rmi.MarshalException");
        exceptionMap.put("NoSuchObjectException", "java.rmi.NoSuchObjectException");
        exceptionMap.put("ServerError", "java.rmi.ServerError");
        exceptionMap.put("ServerException", "java.rmi.ServerException");
        exceptionMap.put("ServerRuntimeException", "java.rmi.ServerRuntimeException");
        exceptionMap.put("StubNotFoundException", "java.rmi.StubNotFoundException");
        exceptionMap.put("UnexpectedException", "java.rmi.UnexpectedException");
        exceptionMap.put("UnknownHostException", "java.rmi.UnknownHostException");
        exceptionMap.put("UnmarshalException", "java.rmi.UnmarshalException");
        exceptionMap.put("NotBoundException", "java.rmi.NotBoundException");
        exceptionMap.put("RMISecurityException", "java.rmi.RMISecurityException");
        exceptionMap.put("ActivationException", "java.rmi.activation.ActivationException");
        exceptionMap.put("UnknownGroupException", "java.rmi.activation.UnknownGroupException");
        exceptionMap.put("UnknownObjectException", "java.rmi.activation.UnknownObjectException");
        exceptionMap.put("ActivateFailedException", "java.rmi.activation.ActivateFailedException");
        exceptionMap.put("ServerCloneException", "java.rmi.server.ServerCloneException");
        exceptionMap.put("ExportException", "java.rmi.server.ExportException");
        exceptionMap.put("SocketSecurityException", "java.rmi.server.SocketSecurityException");
        exceptionMap.put("SkeletonMismatchException", "java.rmi.server.SkeletonMismatchException");
        exceptionMap.put("SkeletonNotFoundException", "java.rmi.server.SkeletonNotFoundException");
        exceptionMap.put("ServerNotActiveException", "java.rmi.server.ServerNotActiveException");
        exceptionMap.put("GeneralSecurityException", "java.security.GeneralSecurityException");
        exceptionMap.put("DigestException", "java.security.DigestException");
        exceptionMap.put("InvalidAlgorithmParameterException", "java.security.InvalidAlgorithmParameterException");
        exceptionMap.put("KeyException", "java.security.KeyException");
        exceptionMap.put("InvalidKeyException", "java.security.InvalidKeyException");
        exceptionMap.put("KeyManagementException", "java.security.KeyManagementException");
        exceptionMap.put("KeyStoreException", "java.security.KeyStoreException");
        exceptionMap.put("NoSuchAlgorithmException", "java.security.NoSuchAlgorithmException");
        exceptionMap.put("NoSuchProviderException", "java.security.NoSuchProviderException");
        exceptionMap.put("SignatureException", "java.security.SignatureException");
        exceptionMap.put("UnrecoverableEntryException", "java.security.UnrecoverableEntryException");
        exceptionMap.put("UnrecoverableKeyException", "java.security.UnrecoverableKeyException");
        exceptionMap.put("PrivilegedActionException", "java.security.PrivilegedActionException");
        exceptionMap.put("InvalidParameterException", "java.security.InvalidParameterException");
        exceptionMap.put("ProviderException", "java.security.ProviderException");
        exceptionMap.put("AccessControlException", "java.security.AccessControlException");
        exceptionMap.put("AclNotFoundException", "java.security.acl.AclNotFoundException");
        exceptionMap.put("LastOwnerException", "java.security.acl.LastOwnerException");
        exceptionMap.put("NotOwnerException", "java.security.acl.NotOwnerException");
        exceptionMap.put("CertificateException", "java.security.cert.CertificateException");
        exceptionMap.put("CertificateEncodingException", "java.security.cert.CertificateEncodingException");
        exceptionMap.put("CertificateExpiredException", "java.security.cert.CertificateExpiredException");
        exceptionMap.put("CertificateNotYetValidException", "java.security.cert.CertificateNotYetValidException");
        exceptionMap.put("CertificateParsingException", "java.security.cert.CertificateParsingException");
        exceptionMap.put("CertificateRevokedException", "java.security.cert.CertificateRevokedException");
        exceptionMap.put("CertPathBuilderException", "java.security.cert.CertPathBuilderException");
        exceptionMap.put("CertPathValidatorException", "java.security.cert.CertPathValidatorException");
        exceptionMap.put("CertStoreException", "java.security.cert.CertStoreException");
        exceptionMap.put("CRLException", "java.security.cert.CRLException");
        exceptionMap.put("InvalidKeySpecException", "java.security.spec.InvalidKeySpecException");
        exceptionMap.put("InvalidParameterSpecException", "java.security.spec.InvalidParameterSpecException");
        exceptionMap.put("SQLException", "java.sql.SQLException");
        exceptionMap.put("BatchUpdateException", "java.sql.BatchUpdateException");
        exceptionMap.put("SQLClientInfoException", "java.sql.SQLClientInfoException");
        exceptionMap.put("SQLNonTransientException", "java.sql.SQLNonTransientException");
        exceptionMap.put("SQLDataException", "java.sql.SQLDataException");
        exceptionMap.put("SQLFeatureNotSupportedException", "java.sql.SQLFeatureNotSupportedException");
        exceptionMap.put("SQLIntegrityConstraintViolationException",
                "java.sql.SQLIntegrityConstraintViolationException");
        exceptionMap.put("SQLInvalidAuthorizationSpecException", "java.sql.SQLInvalidAuthorizationSpecException");
        exceptionMap.put("SQLNonTransientConnectionException", "java.sql.SQLNonTransientConnectionException");
        exceptionMap.put("SQLSyntaxErrorException", "java.sql.SQLSyntaxErrorException");
        exceptionMap.put("SQLRecoverableException", "java.sql.SQLRecoverableException");
        exceptionMap.put("SQLTransientException", "java.sql.SQLTransientException");
        exceptionMap.put("SQLTimeoutException", "java.sql.SQLTimeoutException");
        exceptionMap.put("SQLTransactionRollbackException", "java.sql.SQLTransactionRollbackException");
        exceptionMap.put("SQLTransientConnectionException", "java.sql.SQLTransientConnectionException");
        exceptionMap.put("SQLWarning", "java.sql.SQLWarning");
        exceptionMap.put("DataTruncation", "java.sql.DataTruncation");
        exceptionMap.put("ParseException", "java.text.ParseException");
        exceptionMap.put("DateTimeException", "java.time.DateTimeException");
        exceptionMap.put("DateTimeParseException", "java.time.format.DateTimeParseException");
        exceptionMap.put("UnsupportedTemporalTypeException", "java.time.temporal.UnsupportedTemporalTypeException");
        exceptionMap.put("ZoneRulesException", "java.time.zone.ZoneRulesException");
        exceptionMap.put("UnsupportedDataTypeException", "javax.activation.UnsupportedDataTypeException");
        exceptionMap.put("MimeTypeParseException", "javax.activation.MimeTypeParseException");
        exceptionMap.put("ActivityCompletedException", "javax.activity.ActivityCompletedException");
        exceptionMap.put("ActivityRequiredException", "javax.activity.ActivityRequiredException");
        exceptionMap.put("InvalidActivityException", "javax.activity.InvalidActivityException");
        exceptionMap.put("FilerException", "javax.annotation.processing.FilerException");
        exceptionMap.put("BadPaddingException", "javax.crypto.BadPaddingException");
        exceptionMap.put("AEADBadTagException", "javax.crypto.AEADBadTagException");
        exceptionMap.put("ExemptionMechanismException", "javax.crypto.ExemptionMechanismException");
        exceptionMap.put("IllegalBlockSizeException", "javax.crypto.IllegalBlockSizeException");
        exceptionMap.put("NoSuchPaddingException", "javax.crypto.NoSuchPaddingException");
        exceptionMap.put("ShortBufferException", "javax.crypto.ShortBufferException");
        exceptionMap.put("IIOException", "javax.imageio.IIOException");
        exceptionMap.put("IIOInvalidTreeException", "javax.imageio.metadata.IIOInvalidTreeException");
        exceptionMap.put("UnknownEntityException", "javax.lang.model.UnknownEntityException");
        exceptionMap.put("UnknownAnnotationValueException", "javax.lang.model.element.UnknownAnnotationValueException");
        exceptionMap.put("UnknownElementException", "javax.lang.model.element.UnknownElementException");
        exceptionMap.put("MirroredTypesException", "javax.lang.model.type.MirroredTypesException");
        exceptionMap.put("MirroredTypeException", "javax.lang.model.type.MirroredTypeException");
        exceptionMap.put("UnknownTypeException", "javax.lang.model.type.UnknownTypeException");
        exceptionMap.put("BadAttributeValueExpException", "javax.management.BadAttributeValueExpException");
        exceptionMap.put("BadBinaryOpValueExpException", "javax.management.BadBinaryOpValueExpException");
        exceptionMap.put("BadStringOperationException", "javax.management.BadStringOperationException");
        exceptionMap.put("InvalidApplicationException", "javax.management.InvalidApplicationException");
        exceptionMap.put("JMException", "javax.management.JMException");
        exceptionMap.put("MBeanException", "javax.management.MBeanException");
        exceptionMap.put("MBeanRegistrationException", "javax.management.MBeanRegistrationException");
        exceptionMap.put("OperationsException", "javax.management.OperationsException");
        exceptionMap.put("AttributeNotFoundException", "javax.management.AttributeNotFoundException");
        exceptionMap.put("InstanceAlreadyExistsException", "javax.management.InstanceAlreadyExistsException");
        exceptionMap.put("InstanceNotFoundException", "javax.management.InstanceNotFoundException");
        exceptionMap.put("IntrospectionException", "javax.management.IntrospectionException");
        exceptionMap.put("InvalidAttributeValueException", "javax.management.InvalidAttributeValueException");
        exceptionMap.put("ListenerNotFoundException", "javax.management.ListenerNotFoundException");
        exceptionMap.put("MalformedObjectNameException", "javax.management.MalformedObjectNameException");
        exceptionMap.put("NotCompliantMBeanException", "javax.management.NotCompliantMBeanException");
        exceptionMap.put("ServiceNotFoundException", "javax.management.ServiceNotFoundException");
        exceptionMap.put("ReflectionException", "javax.management.ReflectionException");
        exceptionMap.put("JMRuntimeException", "javax.management.JMRuntimeException");
        exceptionMap.put("RuntimeErrorException", "javax.management.RuntimeErrorException");
        exceptionMap.put("RuntimeMBeanException", "javax.management.RuntimeMBeanException");
        exceptionMap.put("RuntimeOperationsException", "javax.management.RuntimeOperationsException");
        exceptionMap.put("InvalidTargetObjectTypeException",
                "javax.management.modelmbean.InvalidTargetObjectTypeException");
        exceptionMap.put("XMLParseException", "javax.management.modelmbean.XMLParseException");
        exceptionMap.put("MonitorSettingException", "javax.management.monitor.MonitorSettingException");
        exceptionMap.put("OpenDataException", "javax.management.openmbean.OpenDataException");
        exceptionMap.put("InvalidKeyException", "javax.management.openmbean.InvalidKeyException");
        exceptionMap.put("InvalidOpenTypeException", "javax.management.openmbean.InvalidOpenTypeException");
        exceptionMap.put("KeyAlreadyExistsException", "javax.management.openmbean.KeyAlreadyExistsException");
        exceptionMap.put("RelationException", "javax.management.relation.RelationException");
        exceptionMap.put("InvalidRelationIdException", "javax.management.relation.InvalidRelationIdException");
        exceptionMap.put("InvalidRelationServiceException",
                "javax.management.relation.InvalidRelationServiceException");
        exceptionMap.put("InvalidRelationTypeException", "javax.management.relation.InvalidRelationTypeException");
        exceptionMap.put("InvalidRoleInfoException", "javax.management.relation.InvalidRoleInfoException");
        exceptionMap.put("InvalidRoleValueException", "javax.management.relation.InvalidRoleValueException");
        exceptionMap.put("RelationNotFoundException", "javax.management.relation.RelationNotFoundException");
        exceptionMap.put("RelationServiceNotRegisteredException",
                "javax.management.relation.RelationServiceNotRegisteredException");
        exceptionMap.put("RelationTypeNotFoundException", "javax.management.relation.RelationTypeNotFoundException");
        exceptionMap.put("RoleInfoNotFoundException", "javax.management.relation.RoleInfoNotFoundException");
        exceptionMap.put("RoleNotFoundException", "javax.management.relation.RoleNotFoundException");
        exceptionMap.put("JMXProviderException", "javax.management.remote.JMXProviderException");
        exceptionMap.put("JMXServerErrorException", "javax.management.remote.JMXServerErrorException");
        exceptionMap.put("NamingException", "javax.naming.NamingException");
        exceptionMap.put("CannotProceedException", "javax.naming.CannotProceedException");
        exceptionMap.put("CommunicationException", "javax.naming.CommunicationException");
        exceptionMap.put("ConfigurationException", "javax.naming.ConfigurationException");
        exceptionMap.put("ContextNotEmptyException", "javax.naming.ContextNotEmptyException");
        exceptionMap.put("InsufficientResourcesException", "javax.naming.InsufficientResourcesException");
        exceptionMap.put("InterruptedNamingException", "javax.naming.InterruptedNamingException");
        exceptionMap.put("InvalidNameException", "javax.naming.InvalidNameException");
        exceptionMap.put("LimitExceededException", "javax.naming.LimitExceededException");
        exceptionMap.put("SizeLimitExceededException", "javax.naming.SizeLimitExceededException");
        exceptionMap.put("TimeLimitExceededException", "javax.naming.TimeLimitExceededException");
        exceptionMap.put("LinkException", "javax.naming.LinkException");
        exceptionMap.put("LinkLoopException", "javax.naming.LinkLoopException");
        exceptionMap.put("MalformedLinkException", "javax.naming.MalformedLinkException");
        exceptionMap.put("NameAlreadyBoundException", "javax.naming.NameAlreadyBoundException");
        exceptionMap.put("NameNotFoundException", "javax.naming.NameNotFoundException");
        exceptionMap.put("NamingSecurityException", "javax.naming.NamingSecurityException");
        exceptionMap.put("AuthenticationException", "javax.naming.AuthenticationException");
        exceptionMap.put("AuthenticationNotSupportedException", "javax.naming.AuthenticationNotSupportedException");
        exceptionMap.put("NoPermissionException", "javax.naming.NoPermissionException");
        exceptionMap.put("NoInitialContextException", "javax.naming.NoInitialContextException");
        exceptionMap.put("NotContextException", "javax.naming.NotContextException");
        exceptionMap.put("OperationNotSupportedException", "javax.naming.OperationNotSupportedException");
        exceptionMap.put("PartialResultException", "javax.naming.PartialResultException");
        exceptionMap.put("ReferralException", "javax.naming.ReferralException");
        exceptionMap.put("ServiceUnavailableException", "javax.naming.ServiceUnavailableException");
        exceptionMap.put("AttributeInUseException", "javax.naming.directory.AttributeInUseException");
        exceptionMap.put("AttributeModificationException", "javax.naming.directory.AttributeModificationException");
        exceptionMap.put("InvalidAttributeIdentifierException",
                "javax.naming.directory.InvalidAttributeIdentifierException");
        exceptionMap.put("InvalidAttributesException", "javax.naming.directory.InvalidAttributesException");
        exceptionMap.put("InvalidAttributeValueException", "javax.naming.directory.InvalidAttributeValueException");
        exceptionMap.put("InvalidSearchControlsException", "javax.naming.directory.InvalidSearchControlsException");
        exceptionMap.put("InvalidSearchFilterException", "javax.naming.directory.InvalidSearchFilterException");
        exceptionMap.put("NoSuchAttributeException", "javax.naming.directory.NoSuchAttributeException");
        exceptionMap.put("SchemaViolationException", "javax.naming.directory.SchemaViolationException");
        exceptionMap.put("LdapReferralException", "javax.naming.ldap.LdapReferralException");
        exceptionMap.put("SSLException", "javax.net.ssl.SSLException");
        exceptionMap.put("SSLHandshakeException", "javax.net.ssl.SSLHandshakeException");
        exceptionMap.put("SSLKeyException", "javax.net.ssl.SSLKeyException");
        exceptionMap.put("SSLPeerUnverifiedException", "javax.net.ssl.SSLPeerUnverifiedException");
        exceptionMap.put("SSLProtocolException", "javax.net.ssl.SSLProtocolException");
        exceptionMap.put("PrintException", "javax.print.PrintException");
        exceptionMap.put("UnmodifiableSetException", "javax.print.attribute.UnmodifiableSetException");
        exceptionMap.put("ScriptException", "javax.script.ScriptException");
        exceptionMap.put("DestroyFailedException", "javax.security.auth.DestroyFailedException");
        exceptionMap.put("RefreshFailedException", "javax.security.auth.RefreshFailedException");
        exceptionMap.put("UnsupportedCallbackException", "javax.security.auth.callback.UnsupportedCallbackException");
        exceptionMap.put("LoginException", "javax.security.auth.login.LoginException");
        exceptionMap.put("AccountException", "javax.security.auth.login.AccountException");
        exceptionMap.put("AccountExpiredException", "javax.security.auth.login.AccountExpiredException");
        exceptionMap.put("AccountLockedException", "javax.security.auth.login.AccountLockedException");
        exceptionMap.put("AccountNotFoundException", "javax.security.auth.login.AccountNotFoundException");
        exceptionMap.put("CredentialException", "javax.security.auth.login.CredentialException");
        exceptionMap.put("CredentialExpiredException", "javax.security.auth.login.CredentialExpiredException");
        exceptionMap.put("CredentialNotFoundException", "javax.security.auth.login.CredentialNotFoundException");
        exceptionMap.put("FailedLoginException", "javax.security.auth.login.FailedLoginException");
        exceptionMap.put("CertificateException", "javax.security.cert.CertificateException");
        exceptionMap.put("CertificateEncodingException", "javax.security.cert.CertificateEncodingException");
        exceptionMap.put("CertificateExpiredException", "javax.security.cert.CertificateExpiredException");
        exceptionMap.put("CertificateNotYetValidException", "javax.security.cert.CertificateNotYetValidException");
        exceptionMap.put("CertificateParsingException", "javax.security.cert.CertificateParsingException");
        exceptionMap.put("SaslException", "javax.security.sasl.SaslException");
        exceptionMap.put("AuthenticationException", "javax.security.sasl.AuthenticationException");
        exceptionMap.put("InvalidMidiDataException", "javax.sound.midi.InvalidMidiDataException");
        exceptionMap.put("MidiUnavailableException", "javax.sound.midi.MidiUnavailableException");
        exceptionMap.put("LineUnavailableException", "javax.sound.sampled.LineUnavailableException");
        exceptionMap.put("UnsupportedAudioFileException", "javax.sound.sampled.UnsupportedAudioFileException");
        exceptionMap.put("RowSetWarning", "javax.sql.rowset.RowSetWarning");
        exceptionMap.put("SerialException", "javax.sql.rowset.serial.SerialException");
        exceptionMap.put("SyncFactoryException", "javax.sql.rowset.spi.SyncFactoryException");
        exceptionMap.put("SyncProviderException", "javax.sql.rowset.spi.SyncProviderException");
        exceptionMap.put("UnsupportedLookAndFeelException", "javax.swing.UnsupportedLookAndFeelException");
        exceptionMap.put("BadLocationException", "javax.swing.text.BadLocationException");
        exceptionMap.put("ChangedCharSetException", "javax.swing.text.ChangedCharSetException");
        exceptionMap.put("ExpandVetoException", "javax.swing.tree.ExpandVetoException");
        exceptionMap.put("CannotRedoException", "javax.swing.undo.CannotRedoException");
        exceptionMap.put("CannotUndoException", "javax.swing.undo.CannotUndoException");
        exceptionMap.put("InvalidTransactionException", "javax.transaction.InvalidTransactionException");
        exceptionMap.put("TransactionRequiredException", "javax.transaction.TransactionRequiredException");
        exceptionMap.put("TransactionRolledbackException", "javax.transaction.TransactionRolledbackException");
        exceptionMap.put("XAException", "javax.transaction.xa.XAException");
        exceptionMap.put("JAXBException", "javax.xml.bind.JAXBException");
        exceptionMap.put("MarshalException", "javax.xml.bind.MarshalException");
        exceptionMap.put("PropertyException", "javax.xml.bind.PropertyException");
        exceptionMap.put("UnmarshalException", "javax.xml.bind.UnmarshalException");
        exceptionMap.put("ValidationException", "javax.xml.bind.ValidationException");
        exceptionMap.put("DataBindingException", "javax.xml.bind.DataBindingException");
        exceptionMap.put("TypeConstraintException", "javax.xml.bind.TypeConstraintException");
        exceptionMap.put("KeySelectorException", "javax.xml.crypto.KeySelectorException");
        exceptionMap.put("MarshalException", "javax.xml.crypto.MarshalException");
        exceptionMap.put("NoSuchMechanismException", "javax.xml.crypto.NoSuchMechanismException");
        exceptionMap.put("URIReferenceException", "javax.xml.crypto.URIReferenceException");
        exceptionMap.put("TransformException", "javax.xml.crypto.dsig.TransformException");
        exceptionMap.put("XMLSignatureException", "javax.xml.crypto.dsig.XMLSignatureException");
        exceptionMap.put("DatatypeConfigurationException", "javax.xml.datatype.DatatypeConfigurationException");
        exceptionMap.put("ParserConfigurationException", "javax.xml.parsers.ParserConfigurationException");
        exceptionMap.put("FactoryConfigurationError", "javax.xml.parsers.FactoryConfigurationError");
        exceptionMap.put("SOAPException", "javax.xml.soap.SOAPException");
        exceptionMap.put("XMLStreamException", "javax.xml.stream.XMLStreamException");
        exceptionMap.put("FactoryConfigurationError", "javax.xml.stream.FactoryConfigurationError");
        exceptionMap.put("TransformerException", "javax.xml.transform.TransformerException");
        exceptionMap.put("TransformerConfigurationException", "javax.xml.transform.TransformerConfigurationException");
        exceptionMap.put("TransformerFactoryConfigurationError",
                "javax.xml.transform.TransformerFactoryConfigurationError");
        exceptionMap.put("SchemaFactoryConfigurationError", "javax.xml.validation.SchemaFactoryConfigurationError");
        exceptionMap.put("WebServiceException", "javax.xml.ws.WebServiceException");
        exceptionMap.put("ProtocolException", "javax.xml.ws.ProtocolException");
        exceptionMap.put("HTTPException", "javax.xml.ws.http.HTTPException");
        exceptionMap.put("SOAPFaultException", "javax.xml.ws.soap.SOAPFaultException");
        exceptionMap.put("XPathException", "javax.xml.xpath.XPathException");
        exceptionMap.put("XPathExpressionException", "javax.xml.xpath.XPathExpressionException");
        exceptionMap.put("XPathFunctionException", "javax.xml.xpath.XPathFunctionException");
        exceptionMap.put("XPathFactoryConfigurationException", "javax.xml.xpath.XPathFactoryConfigurationException");
        exceptionMap.put("GSSException", "org.ietf.jgss.GSSException");
        exceptionMap.put("SystemException", "org.omg.CORBA.SystemException");
        exceptionMap.put("ACTIVITY_COMPLETED", "org.omg.CORBA.ACTIVITY_COMPLETED");
        exceptionMap.put("ACTIVITY_REQUIRED", "org.omg.CORBA.ACTIVITY_REQUIRED");
        exceptionMap.put("BAD_CONTEXT", "org.omg.CORBA.BAD_CONTEXT");
        exceptionMap.put("BAD_INV_ORDER", "org.omg.CORBA.BAD_INV_ORDER");
        exceptionMap.put("BAD_OPERATION", "org.omg.CORBA.BAD_OPERATION");
        exceptionMap.put("BAD_PARAM", "org.omg.CORBA.BAD_PARAM");
        exceptionMap.put("BAD_QOS", "org.omg.CORBA.BAD_QOS");
        exceptionMap.put("BAD_TYPECODE", "org.omg.CORBA.BAD_TYPECODE");
        exceptionMap.put("CODESET_INCOMPATIBLE", "org.omg.CORBA.CODESET_INCOMPATIBLE");
        exceptionMap.put("COMM_FAILURE", "org.omg.CORBA.COMM_FAILURE");
        exceptionMap.put("DATA_CONVERSION", "org.omg.CORBA.DATA_CONVERSION");
        exceptionMap.put("FREE_MEM", "org.omg.CORBA.FREE_MEM");
        exceptionMap.put("IMP_LIMIT", "org.omg.CORBA.IMP_LIMIT");
        exceptionMap.put("INITIALIZE", "org.omg.CORBA.INITIALIZE");
        exceptionMap.put("INTERNAL", "org.omg.CORBA.INTERNAL");
        exceptionMap.put("INTF_REPOS", "org.omg.CORBA.INTF_REPOS");
        exceptionMap.put("INV_FLAG", "org.omg.CORBA.INV_FLAG");
        exceptionMap.put("INV_IDENT", "org.omg.CORBA.INV_IDENT");
        exceptionMap.put("INV_OBJREF", "org.omg.CORBA.INV_OBJREF");
        exceptionMap.put("INV_POLICY", "org.omg.CORBA.INV_POLICY");
        exceptionMap.put("INVALID_ACTIVITY", "org.omg.CORBA.INVALID_ACTIVITY");
        exceptionMap.put("INVALID_TRANSACTION", "org.omg.CORBA.INVALID_TRANSACTION");
        exceptionMap.put("MARSHAL", "org.omg.CORBA.MARSHAL");
        exceptionMap.put("NO_IMPLEMENT", "org.omg.CORBA.NO_IMPLEMENT");
        exceptionMap.put("NO_MEMORY", "org.omg.CORBA.NO_MEMORY");
        exceptionMap.put("NO_PERMISSION", "org.omg.CORBA.NO_PERMISSION");
        exceptionMap.put("NO_RESOURCES", "org.omg.CORBA.NO_RESOURCES");
        exceptionMap.put("NO_RESPONSE", "org.omg.CORBA.NO_RESPONSE");
        exceptionMap.put("OBJ_ADAPTER", "org.omg.CORBA.OBJ_ADAPTER");
        exceptionMap.put("OBJECT_NOT_EXIST", "org.omg.CORBA.OBJECT_NOT_EXIST");
        exceptionMap.put("PERSIST_STORE", "org.omg.CORBA.PERSIST_STORE");
        exceptionMap.put("REBIND", "org.omg.CORBA.REBIND");
        exceptionMap.put("TIMEOUT", "org.omg.CORBA.TIMEOUT");
        exceptionMap.put("TRANSACTION_MODE", "org.omg.CORBA.TRANSACTION_MODE");
        exceptionMap.put("TRANSACTION_REQUIRED", "org.omg.CORBA.TRANSACTION_REQUIRED");
        exceptionMap.put("TRANSACTION_ROLLEDBACK", "org.omg.CORBA.TRANSACTION_ROLLEDBACK");
        exceptionMap.put("TRANSACTION_UNAVAILABLE", "org.omg.CORBA.TRANSACTION_UNAVAILABLE");
        exceptionMap.put("TRANSIENT", "org.omg.CORBA.TRANSIENT");
        exceptionMap.put("UNKNOWN", "org.omg.CORBA.UNKNOWN");
        exceptionMap.put("UserException", "org.omg.CORBA.UserException");
        exceptionMap.put("Bounds", "org.omg.CORBA.Bounds");
        exceptionMap.put("PolicyError", "org.omg.CORBA.PolicyError");
        exceptionMap.put("UnknownUserException", "org.omg.CORBA.UnknownUserException");
        exceptionMap.put("WrongTransaction", "org.omg.CORBA.WrongTransaction");
        exceptionMap.put("Invalid", "org.omg.CORBA.DynAnyPackage.Invalid");
        exceptionMap.put("InvalidSeq", "org.omg.CORBA.DynAnyPackage.InvalidSeq");
        exceptionMap.put("InvalidValue", "org.omg.CORBA.DynAnyPackage.InvalidValue");
        exceptionMap.put("TypeMismatch", "org.omg.CORBA.DynAnyPackage.TypeMismatch");
        exceptionMap.put("InconsistentTypeCode", "org.omg.CORBA.ORBPackage.InconsistentTypeCode");
        exceptionMap.put("InvalidName", "org.omg.CORBA.ORBPackage.InvalidName");
        exceptionMap.put("BadKind", "org.omg.CORBA.TypeCodePackage.BadKind");
        exceptionMap.put("Bounds", "org.omg.CORBA.TypeCodePackage.Bounds");
        exceptionMap.put("ApplicationException", "org.omg.CORBA.portable.ApplicationException");
        exceptionMap.put("RemarshalException", "org.omg.CORBA.portable.RemarshalException");
        exceptionMap.put("IndirectionException", "org.omg.CORBA.portable.IndirectionException");
        exceptionMap.put("UnknownException", "org.omg.CORBA.portable.UnknownException");
        exceptionMap.put("InvalidAddress", "org.omg.CosNaming.NamingContextExtPackage.InvalidAddress");
        exceptionMap.put("AlreadyBound", "org.omg.CosNaming.NamingContextPackage.AlreadyBound");
        exceptionMap.put("CannotProceed", "org.omg.CosNaming.NamingContextPackage.CannotProceed");
        exceptionMap.put("InvalidName", "org.omg.CosNaming.NamingContextPackage.InvalidName");
        exceptionMap.put("NotEmpty", "org.omg.CosNaming.NamingContextPackage.NotEmpty");
        exceptionMap.put("NotFound", "org.omg.CosNaming.NamingContextPackage.NotFound");
        exceptionMap.put("InconsistentTypeCode", "org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCode");
        exceptionMap.put("InvalidValue", "org.omg.DynamicAny.DynAnyPackage.InvalidValue");
        exceptionMap.put("TypeMismatch", "org.omg.DynamicAny.DynAnyPackage.TypeMismatch");
        exceptionMap.put("UnknownEncoding", "org.omg.IOP.CodecFactoryPackage.UnknownEncoding");
        exceptionMap.put("FormatMismatch", "org.omg.IOP.CodecPackage.FormatMismatch");
        exceptionMap.put("InvalidTypeForEncoding", "org.omg.IOP.CodecPackage.InvalidTypeForEncoding");
        exceptionMap.put("TypeMismatch", "org.omg.IOP.CodecPackage.TypeMismatch");
        exceptionMap.put("ForwardRequest", "org.omg.PortableInterceptor.ForwardRequest");
        exceptionMap.put("InvalidSlot", "org.omg.PortableInterceptor.InvalidSlot");
        exceptionMap.put("DuplicateName", "org.omg.PortableInterceptor.ORBInitInfoPackage.DuplicateName");
        exceptionMap.put("InvalidName", "org.omg.PortableInterceptor.ORBInitInfoPackage.InvalidName");
        exceptionMap.put("ForwardRequest", "org.omg.PortableServer.ForwardRequest");
        exceptionMap.put("NoContext", "org.omg.PortableServer.CurrentPackage.NoContext");
        exceptionMap.put("AdapterInactive", "org.omg.PortableServer.POAManagerPackage.AdapterInactive");
        exceptionMap.put("AdapterAlreadyExists", "org.omg.PortableServer.POAPackage.AdapterAlreadyExists");
        exceptionMap.put("AdapterNonExistent", "org.omg.PortableServer.POAPackage.AdapterNonExistent");
        exceptionMap.put("InvalidPolicy", "org.omg.PortableServer.POAPackage.InvalidPolicy");
        exceptionMap.put("NoServant", "org.omg.PortableServer.POAPackage.NoServant");
        exceptionMap.put("ObjectAlreadyActive", "org.omg.PortableServer.POAPackage.ObjectAlreadyActive");
        exceptionMap.put("ObjectNotActive", "org.omg.PortableServer.POAPackage.ObjectNotActive");
        exceptionMap.put("ServantAlreadyActive", "org.omg.PortableServer.POAPackage.ServantAlreadyActive");
        exceptionMap.put("ServantNotActive", "org.omg.PortableServer.POAPackage.ServantNotActive");
        exceptionMap.put("WrongAdapter", "org.omg.PortableServer.POAPackage.WrongAdapter");
        exceptionMap.put("WrongPolicy", "org.omg.PortableServer.POAPackage.WrongPolicy");
        exceptionMap.put("DOMException", "org.w3c.dom.DOMException");
        exceptionMap.put("EventException", "org.w3c.dom.events.EventException");
        exceptionMap.put("LSException", "org.w3c.dom.ls.LSException");
        exceptionMap.put("SAXException", "org.xml.sax.SAXException");
        exceptionMap.put("SAXNotRecognizedException", "org.xml.sax.SAXNotRecognizedException");
        exceptionMap.put("SAXNotSupportedException", "org.xml.sax.SAXNotSupportedException");
        exceptionMap.put("SAXParseException", "org.xml.sax.SAXParseException");
    }

    /**
     * This method checks if the given simple name exists in the map.
     * It's only be found, when it's a java api exception (stand: version 8).
     *
     * @param simpleName is the simple name for which the qualified name is searched.
     * @return the qualified name or an empty string, if the simple name is not found.
     */
    public static String getQualifiedName(String simpleName) {
        addExceptions();
        return exceptionMap.get(simpleName) != null ? exceptionMap.get(simpleName) : "";
    }
}
